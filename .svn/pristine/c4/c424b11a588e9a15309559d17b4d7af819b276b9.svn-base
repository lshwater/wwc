<?php
App::uses('AppController', 'Controller');
/**
 * Groups Controller
 *
 * @property Group $Group
 * @property PaginatorComponent $Paginator
 */
class DynamicmodelstructsController extends AppController {



/**
 * Components
 *
 * @var array
 */
	public $components = array('Paginator');

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->Group->recursive = 0;
		$this->set('groups', $this->Paginator->paginate());
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Group->exists($id)) {
			throw new NotFoundException(__('Invalid group'));
		}
		$options = array('conditions' => array('Group.' . $this->Group->primaryKey => $id));
		$this->set('group', $this->Group->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add($id, $main_struct_id=null) {
//		configure::write('debug',2);
		if ($this->request->is('post')) {

			if($this->request->data['Dynamicmodelstruct']['type'] == "date"){
				$this->request->data['Dynamicmodelstruct']['attribute'] = array('format'=>'YYYY-MM-DD');
			}
			if($this->request->data['Dynamicmodelstruct']['type'] == "datetime"){
				$this->request->data['Dynamicmodelstruct']['attribute'] = array('format'=>'YYYY-MM-DD HH:mm');
			}
			$rst = $this->Dynamicmodelstruct->create_struct(
					$this->request->data['Dynamicmodelstruct']['model_id'],
					$this->request->data['Dynamicmodelstruct']['name'],
					$this->request->data['Dynamicmodelstruct']['type'],
					$this->request->data['Dynamicmodelstruct']['required'],
					$this->request->data['Dynamicmodelstruct']['label'],
					$this->request->data['Dynamicmodelstruct']['default'],
					$this->request->data['Dynamicmodelstruct']['attribute'],
					$this->request->data['Dynamicmodelstruct']['placeholder'],
					$this->request->data['Dynamicmodelstruct']['main_struct_id']
			);

			if($rst){
				$this->Session->setFlash(__('The Dynamicmodelstruct has been saved.'));
				return $this->redirect(array('controller'=>'dynamicmodels','action' => 'preview',$id));

			}else{
				$this->Session->setFlash(__('The Dynamicmodelstruct failed to saved.'));
				return $this->redirect(array('controller'=>'dynamicmodels','action' => 'preview',$id));
			}
		}
		$this->set('model_id',$id);
		if(!empty($main_struct_id)){

			$this->set('main_struct',$this->Dynamicmodelstruct->read(null,$main_struct_id));
		}

	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function edit($id = null) {
//		configure::write('debug',2);
		if (!$this->Dynamicmodelstruct->exists($id)) {
			throw new NotFoundException(__('Invalid group'));
		}
		$struct = $this->Dynamicmodelstruct->read(null,$id);

		if ($this->request->is(array('post', 'put'))) {
			if ($this->Dynamicmodelstruct->save($this->request->data)) {
				$this->Session->setFlash(__('The Dynamicmodelstruct has been saved.'));
				return $this->redirect(array('controller'=>'dynamicmodels','action' => 'preview',$struct['Dynamicmodelstruct']['model_id']));
			} else {
				$this->Session->setFlash(__('The Dynamicmodelstruct could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Dynamicmodelstruct.' . $this->Dynamicmodelstruct->primaryKey => $id));
			$this->request->data = $struct;

			if($struct['Dynamicmodelstruct']['type'] == $this->Dynamicmodelstruct->type_select){
				$list = $this->Dynamicmodelstruct->find('all',array(
					'conditions'=>array(
						'main_struct_id'=>$id
					),
                    'order'=>array('order'=>'ASC'),
					'field'=>array(
						'id','label','name'
					)
				));
				$this->set('select_item',$list);
			}
		}
	}


/**
 * delete method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		$this->Dynamicmodelstruct->id = $id;
		$struct = $this->Dynamicmodelstruct->read(null, $id);
		if (!$this->Dynamicmodelstruct->exists()) {
			throw new NotFoundException(__('Invalid group'));
		}
		$this->request->allowMethod('post', 'delete');
		if ($this->Dynamicmodelstruct->delete()) {

			if(in_array($struct['Dynamicmodelstruct']['type'], array('image','array','select'))){
				$this->Dynamicmodelstruct->deleteAll(array('main_struct_id' => $id));
			}

			$this->Session->setFlash(__('The Dynamicmodelstruct has been deleted.'));
		} else {
			$this->Session->setFlash(__('The Dynamicmodelstruct could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('controller'=>'dynamicmodels','action' => 'preview',$struct['Dynamicmodelstruct']['model_id']));
	}

	public function moveup($id = null) {
//        configure::write('debug',2);
		$this->Dynamicmodelstruct->id = $id;
		$struct = $this->Dynamicmodelstruct->read(null, $id);
		if (!$this->Dynamicmodelstruct->exists()) {
			throw new NotFoundException(__('Invalid group'));
		}
		$order = $struct['Dynamicmodelstruct']['order'];

        $options = array();
        $options['conditions']['model_id'] = $struct['Dynamicmodelstruct']['model_id'];
        $options['conditions']['order <'] = $struct['Dynamicmodelstruct']['order'];

        if($struct['Dynamicmodelstruct']['main_struct_id']){
            $options['conditions']['main_struct_id'] = $struct['Dynamicmodelstruct']['main_struct_id'];
            $options['conditions']['hidden'] = 0;
        }else{
            $options['conditions']['main_struct_id'] = null;
        }

        $options['order']['order'] = 'DESC';

		$upper = $this->Dynamicmodelstruct->find('first',$options);
//        debug($upper);exit();
        if(!empty($upper)){
            $this->Dynamicmodelstruct->id = $id;
            $this->Dynamicmodelstruct->saveField('order',$upper['Dynamicmodelstruct']['order']);

            $this->Dynamicmodelstruct->id = $upper['Dynamicmodelstruct']['id'];
            $this->Dynamicmodelstruct->saveField('order',$order);
        }

        $this->Session->setFlash(__('The Dynamicmodelstruct is updated.'));

		return $this->redirect(array('controller'=>'dynamicmodels','action' => 'preview',$struct['Dynamicmodelstruct']['model_id']));
	}

    public function movedown($id = null) {
        $this->Dynamicmodelstruct->id = $id;
        $struct = $this->Dynamicmodelstruct->read(null, $id);
        if (!$this->Dynamicmodelstruct->exists()) {
            throw new NotFoundException(__('Invalid group'));
        }
        $order = $struct['Dynamicmodelstruct']['order'];

        $options = array();
        $options['conditions']['model_id'] = $struct['Dynamicmodelstruct']['model_id'];
        $options['conditions']['order >'] = $struct['Dynamicmodelstruct']['order'];

        if($struct['Dynamicmodelstruct']['main_struct_id']){
            $options['conditions']['main_struct_id'] = $struct['Dynamicmodelstruct']['main_struct_id'];
            $options['conditions']['hidden'] = 0;
        }else{
            $options['conditions']['main_struct_id'] = null;
        }

        $options['order']['order'] = 'ASC';

        $upper = $this->Dynamicmodelstruct->find('first',$options);

        if(!empty($upper)){
            $this->Dynamicmodelstruct->id = $id;
            $this->Dynamicmodelstruct->saveField('order',$upper['Dynamicmodelstruct']['order']);

            $this->Dynamicmodelstruct->id = $upper['Dynamicmodelstruct']['id'];
            $this->Dynamicmodelstruct->saveField('order',$order);
        }

        $this->Session->setFlash(__('The Dynamicmodelstruct is updated.'));

        return $this->redirect(array('controller'=>'dynamicmodels','action' => 'preview',$struct['Dynamicmodelstruct']['model_id']));
    }




	public function beforeFilter(){
        $this->Auth->allow('test', 'test2');
    }
}

<?php
App::uses('AppController', 'Controller');
/**
 * Groups Controller
 *
 * @property Group $Group
 * @property PaginatorComponent $Paginator
 */
class CustomgroupsController extends AppController {



/**
 * Components
 *
 * @var array
 */
	public $components = array('Paginator');

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->Group->recursive = 0;
		$this->set('groups', $this->Paginator->paginate());
	}



/**
 * view method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Group->exists($id)) {
			throw new NotFoundException(__('Invalid group'));
		}
		$options = array('conditions' => array('Group.' . $this->Group->primaryKey => $id));
		$this->set('group', $this->Group->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add($type_id) {

		if ($this->request->is('post')) {

            $order = $this->Customgroup->find('count',array(
                'conditions'=>array(
                    'Customgroup.type_id'=>$this->request->data['Customgroup']['type_id'],
                ),
                'recursive'=>-1
            ));

            $this->request->data['Customgroup']['display_order'] = $order +1;
            $this->Customgroup->create();

			if($this->Customgroup->save($this->request->data)){
				$this->Session->setFlash(__('The Customgroup has been saved.'));
				return $this->redirect(array('controller'=>'customtypes','action' => 'preview',$this->request->data['Customgroup']['type_id']));

			}else{
				$this->Session->setFlash(__('The Customgroup failed to saved.'));
				return $this->redirect(array('controller'=>'customtypes','action' => 'preview',$this->request->data['Customgroup']['type_id']));
			}
		}
		$this->set('type_id', $type_id);

	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function edit($id = null) {

		if (!$this->Customgroup->exists($id)) {
			throw new NotFoundException(__('Invalid group'));
		}


		if ($this->request->is(array('post', 'put'))) {
			if ($this->Customgroup->save($this->request->data)) {
				$this->Session->setFlash(__('The Customgroup has been saved.'));
				return $this->redirect(array('controller'=>'customtypes','action' => 'preview',$this->request->data['Customgroup']['type_id']));
			} else {
				$this->Session->setFlash(__('The Customgroup could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Customgroup.' . $this->Customgroup->primaryKey => $id));
			$this->request->data = $this->Customgroup->find('first',$options);
		}


	}


/**
 * delete method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function delete($id = null) {


		$this->Customgroup->id = $id;

		if (!$this->Customgroup->exists()) {
			throw new NotFoundException(__('Invalid group'));
		}

		$type_id = $this->Customgroup->field('type_id');
        $layouts = $this->Customgroup->Customlayout->find('all',array(
            'conditions'=>array(
                'Customlayout.customgroup_id'=>$id
            ),
            'recursive'=>-1
        ));

		$this->request->allowMethod('post', 'delete');
		if ($this->Customgroup->delete()) {
            foreach($layouts as $field){
                $this->Customgroup->Customlayout->id = $field['Customlayout']['id'];
                $this->Customgroup->Customlayout->saveField('customgroup_id', null);
            }
//			if(in_array($struct['Customgroup']['type'], array('image','array','select'))){
//				$this->Customgroup->deleteAll(array('main_struct_id' => $id));
//			}

			$this->Session->setFlash(__('The Customgroup has been deleted.'));
		} else {
			$this->Session->setFlash(__('The Customgroup could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('controller'=>'customtypes','action' => 'preview',$type_id));
	}

	public function moveup($id = null) {
	    configure::write('debug',2);
		$this->Customgroup->id = $id;
		$struct = $this->Customgroup->read(null, $id);
		if (!$this->Customgroup->exists()) {
			throw new NotFoundException(__('Invalid group'));
		}
		$order = $struct['Customgroup']['display_order'];

        $options = array();
        $options['conditions']['type_id'] = $struct['Customgroup']['type_id'];
        $options['conditions']['display_order <'] = $struct['Customgroup']['display_order'];
        $options['recursive'] = -1;

//        if($struct['Customgroup']['main_struct_id']){
//            $options['conditions']['main_struct_id'] = $struct['Customgroup']['main_struct_id'];
//            $options['conditions']['hidden'] = 0;
//        }else{
//            $options['conditions']['main_struct_id'] = null;
//        }

        $options['order']['display_order'] = 'DESC';

		$upper = $this->Customgroup->find('first',$options);
//        debug($upper);exit();
        if(!empty($upper)){
            $this->Customgroup->id = $id;
            $this->Customgroup->saveField('display_order',$upper['Customgroup']['display_order']);

            $this->Customgroup->id = $upper['Customgroup']['id'];
            $this->Customgroup->saveField('display_order',$order);
        }

        $this->Session->setFlash(__('The Customgroup is updated.'));

		return $this->redirect(array('controller'=>'customtypes','action' => 'preview',$struct['Customgroup']['type_id']));
	}

    public function movedown($id = null) {
        $this->Customgroup->id = $id;
        $struct = $this->Customgroup->read(null, $id);
        if (!$this->Customgroup->exists()) {
            throw new NotFoundException(__('Invalid group'));
        }
        $order = $struct['Customgroup']['display_order'];

        $options = array();
        $options['conditions']['type_id'] = $struct['Customgroup']['type_id'];
        $options['conditions']['display_order >'] = $struct['Customgroup']['display_order'];
        $options['recursive'] = -1;
//
//        if($struct['Customgroup']['main_struct_id']){
//            $options['conditions']['main_struct_id'] = $struct['Customgroup']['main_struct_id'];
//            $options['conditions']['hidden'] = 0;
//        }else{
//            $options['conditions']['main_struct_id'] = null;
//        }

        $options['order']['display_order'] = 'ASC';

        $upper = $this->Customgroup->find('first',$options);
        if(!empty($upper)){
            $this->Customgroup->id = $id;
            $this->Customgroup->saveField('display_order',$upper['Customgroup']['display_order']);

            $this->Customgroup->id = $upper['Customgroup']['id'];
            $this->Customgroup->saveField('display_order',$order);
        }

        $this->Session->setFlash(__('The Customgroup is updated.'));

        return $this->redirect(array('controller'=>'customtypes','action' => 'preview',$struct['Customgroup']['type_id']));

    }





	public function beforeFilter(){
        $this->Auth->allow('test', 'test2');
    }
}
